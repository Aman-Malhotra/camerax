//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: messages.proto

package dev.yanshouwang.camerax.messages;

@kotlin.jvm.JvmName("-initializereply")
public inline fun reply(block: dev.yanshouwang.camerax.messages.ReplyKt.Dsl.() -> kotlin.Unit): dev.yanshouwang.camerax.messages.Messages.Reply =
  dev.yanshouwang.camerax.messages.ReplyKt.Dsl._create(dev.yanshouwang.camerax.messages.Messages.Reply.newBuilder()).apply { block() }._build()
public object ReplyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: dev.yanshouwang.camerax.messages.Messages.Reply.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: dev.yanshouwang.camerax.messages.Messages.Reply.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): dev.yanshouwang.camerax.messages.Messages.Reply = _builder.build()

    /**
     * <code>.messages.GetQuarterTurnsReplyArguments get_quarter_turns_arguments = 1;</code>
     */
    public var getQuarterTurnsArguments: dev.yanshouwang.camerax.messages.Messages.GetQuarterTurnsReplyArguments
      @JvmName("getGetQuarterTurnsArguments")
      get() = _builder.getGetQuarterTurnsArguments()
      @JvmName("setGetQuarterTurnsArguments")
      set(value) {
        _builder.setGetQuarterTurnsArguments(value)
      }
    /**
     * <code>.messages.GetQuarterTurnsReplyArguments get_quarter_turns_arguments = 1;</code>
     */
    public fun clearGetQuarterTurnsArguments() {
      _builder.clearGetQuarterTurnsArguments()
    }
    /**
     * <code>.messages.GetQuarterTurnsReplyArguments get_quarter_turns_arguments = 1;</code>
     * @return Whether the getQuarterTurnsArguments field is set.
     */
    public fun hasGetQuarterTurnsArguments(): kotlin.Boolean {
      return _builder.hasGetQuarterTurnsArguments()
    }

    /**
     * <code>.messages.CameraControllerBindReplyArguments camera_controller_bind_arguments = 2;</code>
     */
    public var cameraControllerBindArguments: dev.yanshouwang.camerax.messages.Messages.CameraControllerBindReplyArguments
      @JvmName("getCameraControllerBindArguments")
      get() = _builder.getCameraControllerBindArguments()
      @JvmName("setCameraControllerBindArguments")
      set(value) {
        _builder.setCameraControllerBindArguments(value)
      }
    /**
     * <code>.messages.CameraControllerBindReplyArguments camera_controller_bind_arguments = 2;</code>
     */
    public fun clearCameraControllerBindArguments() {
      _builder.clearCameraControllerBindArguments()
    }
    /**
     * <code>.messages.CameraControllerBindReplyArguments camera_controller_bind_arguments = 2;</code>
     * @return Whether the cameraControllerBindArguments field is set.
     */
    public fun hasCameraControllerBindArguments(): kotlin.Boolean {
      return _builder.hasCameraControllerBindArguments()
    }
    public val argumentsCase: dev.yanshouwang.camerax.messages.Messages.Reply.ArgumentsCase
      @JvmName("getArgumentsCase")
      get() = _builder.getArgumentsCase()

    public fun clearArguments() {
      _builder.clearArguments()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun dev.yanshouwang.camerax.messages.Messages.Reply.copy(block: dev.yanshouwang.camerax.messages.ReplyKt.Dsl.() -> kotlin.Unit): dev.yanshouwang.camerax.messages.Messages.Reply =
  dev.yanshouwang.camerax.messages.ReplyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val dev.yanshouwang.camerax.messages.Messages.ReplyOrBuilder.getQuarterTurnsArgumentsOrNull: dev.yanshouwang.camerax.messages.Messages.GetQuarterTurnsReplyArguments?
  get() = if (hasGetQuarterTurnsArguments()) getGetQuarterTurnsArguments() else null

val dev.yanshouwang.camerax.messages.Messages.ReplyOrBuilder.cameraControllerBindArgumentsOrNull: dev.yanshouwang.camerax.messages.Messages.CameraControllerBindReplyArguments?
  get() = if (hasCameraControllerBindArguments()) getCameraControllerBindArguments() else null

