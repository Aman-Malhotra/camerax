//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: messages.proto

package dev.yanshouwang.camerax.messages;

@kotlin.jvm.JvmSynthetic
public inline fun command(block: dev.yanshouwang.camerax.messages.CommandKt.Dsl.() -> kotlin.Unit): dev.yanshouwang.camerax.messages.Messages.Command =
  dev.yanshouwang.camerax.messages.CommandKt.Dsl._create(dev.yanshouwang.camerax.messages.Messages.Command.newBuilder()).apply { block() }._build()
public object CommandKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: dev.yanshouwang.camerax.messages.Messages.Command.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: dev.yanshouwang.camerax.messages.Messages.Command.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): dev.yanshouwang.camerax.messages.Messages.Command = _builder.build()

    /**
     * <code>.messages.CommandCategory category = 1;</code>
     */
    public var category: dev.yanshouwang.camerax.messages.Messages.CommandCategory
      @JvmName("getCategory")
      get() = _builder.getCategory()
      @JvmName("setCategory")
      set(value) {
        _builder.setCategory(value)
      }
    /**
     * <code>.messages.CommandCategory category = 1;</code>
     */
    public fun clearCategory() {
      _builder.clearCategory()
    }

    /**
     * <code>.messages.CameraControllerBindCommandArguments camera_controller_bind_arguments = 2;</code>
     */
    public var cameraControllerBindArguments: dev.yanshouwang.camerax.messages.Messages.CameraControllerBindCommandArguments
      @JvmName("getCameraControllerBindArguments")
      get() = _builder.getCameraControllerBindArguments()
      @JvmName("setCameraControllerBindArguments")
      set(value) {
        _builder.setCameraControllerBindArguments(value)
      }
    /**
     * <code>.messages.CameraControllerBindCommandArguments camera_controller_bind_arguments = 2;</code>
     */
    public fun clearCameraControllerBindArguments() {
      _builder.clearCameraControllerBindArguments()
    }
    /**
     * <code>.messages.CameraControllerBindCommandArguments camera_controller_bind_arguments = 2;</code>
     * @return Whether the cameraControllerBindArguments field is set.
     */
    public fun hasCameraControllerBindArguments(): kotlin.Boolean {
      return _builder.hasCameraControllerBindArguments()
    }

    /**
     * <code>.messages.CameraControllerUnbindCommandArguments camera_controller_unbind_arguments = 3;</code>
     */
    public var cameraControllerUnbindArguments: dev.yanshouwang.camerax.messages.Messages.CameraControllerUnbindCommandArguments
      @JvmName("getCameraControllerUnbindArguments")
      get() = _builder.getCameraControllerUnbindArguments()
      @JvmName("setCameraControllerUnbindArguments")
      set(value) {
        _builder.setCameraControllerUnbindArguments(value)
      }
    /**
     * <code>.messages.CameraControllerUnbindCommandArguments camera_controller_unbind_arguments = 3;</code>
     */
    public fun clearCameraControllerUnbindArguments() {
      _builder.clearCameraControllerUnbindArguments()
    }
    /**
     * <code>.messages.CameraControllerUnbindCommandArguments camera_controller_unbind_arguments = 3;</code>
     * @return Whether the cameraControllerUnbindArguments field is set.
     */
    public fun hasCameraControllerUnbindArguments(): kotlin.Boolean {
      return _builder.hasCameraControllerUnbindArguments()
    }

    /**
     * <code>.messages.CameraControllerTorchCommandArguments camera_controller_torch_arguments = 4;</code>
     */
    public var cameraControllerTorchArguments: dev.yanshouwang.camerax.messages.Messages.CameraControllerTorchCommandArguments
      @JvmName("getCameraControllerTorchArguments")
      get() = _builder.getCameraControllerTorchArguments()
      @JvmName("setCameraControllerTorchArguments")
      set(value) {
        _builder.setCameraControllerTorchArguments(value)
      }
    /**
     * <code>.messages.CameraControllerTorchCommandArguments camera_controller_torch_arguments = 4;</code>
     */
    public fun clearCameraControllerTorchArguments() {
      _builder.clearCameraControllerTorchArguments()
    }
    /**
     * <code>.messages.CameraControllerTorchCommandArguments camera_controller_torch_arguments = 4;</code>
     * @return Whether the cameraControllerTorchArguments field is set.
     */
    public fun hasCameraControllerTorchArguments(): kotlin.Boolean {
      return _builder.hasCameraControllerTorchArguments()
    }

    /**
     * <code>.messages.CameraControllerZoomCommandArguments camera_controller_zoom_arguments = 5;</code>
     */
    public var cameraControllerZoomArguments: dev.yanshouwang.camerax.messages.Messages.CameraControllerZoomCommandArguments
      @JvmName("getCameraControllerZoomArguments")
      get() = _builder.getCameraControllerZoomArguments()
      @JvmName("setCameraControllerZoomArguments")
      set(value) {
        _builder.setCameraControllerZoomArguments(value)
      }
    /**
     * <code>.messages.CameraControllerZoomCommandArguments camera_controller_zoom_arguments = 5;</code>
     */
    public fun clearCameraControllerZoomArguments() {
      _builder.clearCameraControllerZoomArguments()
    }
    /**
     * <code>.messages.CameraControllerZoomCommandArguments camera_controller_zoom_arguments = 5;</code>
     * @return Whether the cameraControllerZoomArguments field is set.
     */
    public fun hasCameraControllerZoomArguments(): kotlin.Boolean {
      return _builder.hasCameraControllerZoomArguments()
    }

    /**
     * <code>.messages.CameraControllerFocusAutomaticallyCommandArguments camera_controller_focus_automatically_arguments = 6;</code>
     */
    public var cameraControllerFocusAutomaticallyArguments: dev.yanshouwang.camerax.messages.Messages.CameraControllerFocusAutomaticallyCommandArguments
      @JvmName("getCameraControllerFocusAutomaticallyArguments")
      get() = _builder.getCameraControllerFocusAutomaticallyArguments()
      @JvmName("setCameraControllerFocusAutomaticallyArguments")
      set(value) {
        _builder.setCameraControllerFocusAutomaticallyArguments(value)
      }
    /**
     * <code>.messages.CameraControllerFocusAutomaticallyCommandArguments camera_controller_focus_automatically_arguments = 6;</code>
     */
    public fun clearCameraControllerFocusAutomaticallyArguments() {
      _builder.clearCameraControllerFocusAutomaticallyArguments()
    }
    /**
     * <code>.messages.CameraControllerFocusAutomaticallyCommandArguments camera_controller_focus_automatically_arguments = 6;</code>
     * @return Whether the cameraControllerFocusAutomaticallyArguments field is set.
     */
    public fun hasCameraControllerFocusAutomaticallyArguments(): kotlin.Boolean {
      return _builder.hasCameraControllerFocusAutomaticallyArguments()
    }

    /**
     * <code>.messages.CameraControllerFocusManuallyCommandArguments camera_controller_focus_manually_arguments = 7;</code>
     */
    public var cameraControllerFocusManuallyArguments: dev.yanshouwang.camerax.messages.Messages.CameraControllerFocusManuallyCommandArguments
      @JvmName("getCameraControllerFocusManuallyArguments")
      get() = _builder.getCameraControllerFocusManuallyArguments()
      @JvmName("setCameraControllerFocusManuallyArguments")
      set(value) {
        _builder.setCameraControllerFocusManuallyArguments(value)
      }
    /**
     * <code>.messages.CameraControllerFocusManuallyCommandArguments camera_controller_focus_manually_arguments = 7;</code>
     */
    public fun clearCameraControllerFocusManuallyArguments() {
      _builder.clearCameraControllerFocusManuallyArguments()
    }
    /**
     * <code>.messages.CameraControllerFocusManuallyCommandArguments camera_controller_focus_manually_arguments = 7;</code>
     * @return Whether the cameraControllerFocusManuallyArguments field is set.
     */
    public fun hasCameraControllerFocusManuallyArguments(): kotlin.Boolean {
      return _builder.hasCameraControllerFocusManuallyArguments()
    }

    /**
     * <code>.messages.ImageProxyCloseCommandArguments image_proxy_close_arguments = 8;</code>
     */
    public var imageProxyCloseArguments: dev.yanshouwang.camerax.messages.Messages.ImageProxyCloseCommandArguments
      @JvmName("getImageProxyCloseArguments")
      get() = _builder.getImageProxyCloseArguments()
      @JvmName("setImageProxyCloseArguments")
      set(value) {
        _builder.setImageProxyCloseArguments(value)
      }
    /**
     * <code>.messages.ImageProxyCloseCommandArguments image_proxy_close_arguments = 8;</code>
     */
    public fun clearImageProxyCloseArguments() {
      _builder.clearImageProxyCloseArguments()
    }
    /**
     * <code>.messages.ImageProxyCloseCommandArguments image_proxy_close_arguments = 8;</code>
     * @return Whether the imageProxyCloseArguments field is set.
     */
    public fun hasImageProxyCloseArguments(): kotlin.Boolean {
      return _builder.hasImageProxyCloseArguments()
    }
    public val argumentsCase: dev.yanshouwang.camerax.messages.Messages.Command.ArgumentsCase
      @JvmName("getArgumentsCase")
      get() = _builder.getArgumentsCase()

    public fun clearArguments() {
      _builder.clearArguments()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun dev.yanshouwang.camerax.messages.Messages.Command.copy(block: dev.yanshouwang.camerax.messages.CommandKt.Dsl.() -> kotlin.Unit): dev.yanshouwang.camerax.messages.Messages.Command =
  dev.yanshouwang.camerax.messages.CommandKt.Dsl._create(this.toBuilder()).apply { block() }._build()
