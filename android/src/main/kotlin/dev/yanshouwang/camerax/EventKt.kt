//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: messages.proto

package dev.yanshouwang.camerax;

@kotlin.jvm.JvmSynthetic
inline fun event(block: dev.yanshouwang.camerax.EventKt.Dsl.() -> Unit): dev.yanshouwang.camerax.Messages.Event =
  dev.yanshouwang.camerax.EventKt.Dsl._create(dev.yanshouwang.camerax.Messages.Event.newBuilder()).apply { block() }._build()
object EventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: dev.yanshouwang.camerax.Messages.Event.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: dev.yanshouwang.camerax.Messages.Event.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): dev.yanshouwang.camerax.Messages.Event = _builder.build()

    /**
     * <code>.messages.EventCategory category = 1;</code>
     */
    var category: dev.yanshouwang.camerax.Messages.EventCategory
      @JvmName("getCategory")
      get() = _builder.getCategory()
      @JvmName("setCategory")
      set(value) {
        _builder.setCategory(value)
      }
    /**
     * <code>.messages.EventCategory category = 1;</code>
     */
    fun clearCategory() {
      _builder.clearCategory()
    }

    /**
     * <code>int32 quarter_turns = 2;</code>
     */
    var quarterTurns: kotlin.Int
      @JvmName("getQuarterTurns")
      get() = _builder.getQuarterTurns()
      @JvmName("setQuarterTurns")
      set(value) {
        _builder.setQuarterTurns(value)
      }
    /**
     * <code>int32 quarter_turns = 2;</code>
     */
    fun clearQuarterTurns() {
      _builder.clearQuarterTurns()
    }

    /**
     * <code>string uuid = 3;</code>
     */
    var uuid: kotlin.String
      @JvmName("getUuid")
      get() = _builder.getUuid()
      @JvmName("setUuid")
      set(value) {
        _builder.setUuid(value)
      }
    /**
     * <code>string uuid = 3;</code>
     */
    fun clearUuid() {
      _builder.clearUuid()
    }

    /**
     * <code>bool torch_state = 4;</code>
     */
    var torchState: kotlin.Boolean
      @JvmName("getTorchState")
      get() = _builder.getTorchState()
      @JvmName("setTorchState")
      set(value) {
        _builder.setTorchState(value)
      }
    /**
     * <code>bool torch_state = 4;</code>
     */
    fun clearTorchState() {
      _builder.clearTorchState()
    }

    /**
     * <code>double zoom_value = 5;</code>
     */
    var zoomValue: kotlin.Double
      @JvmName("getZoomValue")
      get() = _builder.getZoomValue()
      @JvmName("setZoomValue")
      set(value) {
        _builder.setZoomValue(value)
      }
    /**
     * <code>double zoom_value = 5;</code>
     */
    fun clearZoomValue() {
      _builder.clearZoomValue()
    }

    /**
     * <code>.messages.ImageProxy image_proxy = 6;</code>
     */
    var imageProxy: dev.yanshouwang.camerax.Messages.ImageProxy
      @JvmName("getImageProxy")
      get() = _builder.getImageProxy()
      @JvmName("setImageProxy")
      set(value) {
        _builder.setImageProxy(value)
      }
    /**
     * <code>.messages.ImageProxy image_proxy = 6;</code>
     */
    fun clearImageProxy() {
      _builder.clearImageProxy()
    }
    /**
     * <code>.messages.ImageProxy image_proxy = 6;</code>
     * @return Whether the imageProxy field is set.
     */
    fun hasImageProxy(): kotlin.Boolean {
      return _builder.hasImageProxy()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun dev.yanshouwang.camerax.Messages.Event.copy(block: dev.yanshouwang.camerax.EventKt.Dsl.() -> Unit): dev.yanshouwang.camerax.Messages.Event =
  dev.yanshouwang.camerax.EventKt.Dsl._create(this.toBuilder()).apply { block() }._build()
