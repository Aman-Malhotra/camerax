//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: communication.proto

package dev.yanshouwang.camerax.communication;

@kotlin.jvm.JvmSynthetic
inline fun message(block: dev.yanshouwang.camerax.communication.MessageKt.Dsl.() -> Unit): dev.yanshouwang.camerax.communication.Communication.Message =
  dev.yanshouwang.camerax.communication.MessageKt.Dsl._create(dev.yanshouwang.camerax.communication.Communication.Message.newBuilder()).apply { block() }._build()
object MessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: dev.yanshouwang.camerax.communication.Communication.Message.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: dev.yanshouwang.camerax.communication.Communication.Message.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): dev.yanshouwang.camerax.communication.Communication.Message = _builder.build()

    /**
     * <code>.communication.MessageCategory category = 1;</code>
     */
    var category: dev.yanshouwang.camerax.communication.Communication.MessageCategory
      @JvmName("getCategory")
      get() = _builder.getCategory()
      @JvmName("setCategory")
      set(value) {
        _builder.setCategory(value)
      }
    /**
     * <code>.communication.MessageCategory category = 1;</code>
     */
    fun clearCategory() {
      _builder.clearCategory()
    }

    /**
     * <code>.communication.BindArgs bindArgs = 2;</code>
     */
    var bindArgs: dev.yanshouwang.camerax.communication.Communication.BindArgs
      @JvmName("getBindArgs")
      get() = _builder.getBindArgs()
      @JvmName("setBindArgs")
      set(value) {
        _builder.setBindArgs(value)
      }
    /**
     * <code>.communication.BindArgs bindArgs = 2;</code>
     */
    fun clearBindArgs() {
      _builder.clearBindArgs()
    }
    /**
     * <code>.communication.BindArgs bindArgs = 2;</code>
     * @return Whether the bindArgs field is set.
     */
    fun hasBindArgs(): kotlin.Boolean {
      return _builder.hasBindArgs()
    }

    /**
     * <code>.communication.UnbindArgs unbindArgs = 3;</code>
     */
    var unbindArgs: dev.yanshouwang.camerax.communication.Communication.UnbindArgs
      @JvmName("getUnbindArgs")
      get() = _builder.getUnbindArgs()
      @JvmName("setUnbindArgs")
      set(value) {
        _builder.setUnbindArgs(value)
      }
    /**
     * <code>.communication.UnbindArgs unbindArgs = 3;</code>
     */
    fun clearUnbindArgs() {
      _builder.clearUnbindArgs()
    }
    /**
     * <code>.communication.UnbindArgs unbindArgs = 3;</code>
     * @return Whether the unbindArgs field is set.
     */
    fun hasUnbindArgs(): kotlin.Boolean {
      return _builder.hasUnbindArgs()
    }

    /**
     * <code>.communication.TorchArgs torchArgs = 4;</code>
     */
    var torchArgs: dev.yanshouwang.camerax.communication.Communication.TorchArgs
      @JvmName("getTorchArgs")
      get() = _builder.getTorchArgs()
      @JvmName("setTorchArgs")
      set(value) {
        _builder.setTorchArgs(value)
      }
    /**
     * <code>.communication.TorchArgs torchArgs = 4;</code>
     */
    fun clearTorchArgs() {
      _builder.clearTorchArgs()
    }
    /**
     * <code>.communication.TorchArgs torchArgs = 4;</code>
     * @return Whether the torchArgs field is set.
     */
    fun hasTorchArgs(): kotlin.Boolean {
      return _builder.hasTorchArgs()
    }

    /**
     * <code>.communication.DisplayRotation rotation = 5;</code>
     */
    var rotation: dev.yanshouwang.camerax.communication.Communication.DisplayRotation
      @JvmName("getRotation")
      get() = _builder.getRotation()
      @JvmName("setRotation")
      set(value) {
        _builder.setRotation(value)
      }
    /**
     * <code>.communication.DisplayRotation rotation = 5;</code>
     */
    fun clearRotation() {
      _builder.clearRotation()
    }
    /**
     * <code>.communication.DisplayRotation rotation = 5;</code>
     * @return Whether the rotation field is set.
     */
    fun hasRotation(): kotlin.Boolean {
      return _builder.hasRotation()
    }
    val stubCase: dev.yanshouwang.camerax.communication.Communication.Message.StubCase
      @JvmName("getStubCase")
      get() = _builder.getStubCase()

    fun clearStub() {
      _builder.clearStub()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun dev.yanshouwang.camerax.communication.Communication.Message.copy(block: dev.yanshouwang.camerax.communication.MessageKt.Dsl.() -> Unit): dev.yanshouwang.camerax.communication.Communication.Message =
  dev.yanshouwang.camerax.communication.MessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()
