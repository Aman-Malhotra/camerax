//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: communication.proto

package dev.yanshouwang.camerax.communication;

@kotlin.jvm.JvmSynthetic
inline fun message(block: dev.yanshouwang.camerax.communication.MessageKt.Dsl.() -> Unit): dev.yanshouwang.camerax.communication.Communication.Message =
  dev.yanshouwang.camerax.communication.MessageKt.Dsl._create(dev.yanshouwang.camerax.communication.Communication.Message.newBuilder()).apply { block() }._build()
object MessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: dev.yanshouwang.camerax.communication.Communication.Message.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: dev.yanshouwang.camerax.communication.Communication.Message.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): dev.yanshouwang.camerax.communication.Communication.Message = _builder.build()

    /**
     * <code>int32 key = 1;</code>
     */
    var key: kotlin.Int
      @JvmName("getKey")
      get() = _builder.getKey()
      @JvmName("setKey")
      set(value) {
        _builder.setKey(value)
      }
    /**
     * <code>int32 key = 1;</code>
     */
    fun clearKey() {
      _builder.clearKey()
    }

    /**
     * <code>.communication.MessageCategory category = 2;</code>
     */
    var category: dev.yanshouwang.camerax.communication.Communication.MessageCategory
      @JvmName("getCategory")
      get() = _builder.getCategory()
      @JvmName("setCategory")
      set(value) {
        _builder.setCategory(value)
      }
    /**
     * <code>.communication.MessageCategory category = 2;</code>
     */
    fun clearCategory() {
      _builder.clearCategory()
    }

    /**
     * <code>.communication.BindArgs bind_args = 3;</code>
     */
    var bindArgs: dev.yanshouwang.camerax.communication.Communication.BindArgs
      @JvmName("getBindArgs")
      get() = _builder.getBindArgs()
      @JvmName("setBindArgs")
      set(value) {
        _builder.setBindArgs(value)
      }
    /**
     * <code>.communication.BindArgs bind_args = 3;</code>
     */
    fun clearBindArgs() {
      _builder.clearBindArgs()
    }
    /**
     * <code>.communication.BindArgs bind_args = 3;</code>
     * @return Whether the bindArgs field is set.
     */
    fun hasBindArgs(): kotlin.Boolean {
      return _builder.hasBindArgs()
    }

    /**
     * <code>.communication.TextureInfo texture_info = 4;</code>
     */
    var textureInfo: dev.yanshouwang.camerax.communication.Communication.TextureInfo
      @JvmName("getTextureInfo")
      get() = _builder.getTextureInfo()
      @JvmName("setTextureInfo")
      set(value) {
        _builder.setTextureInfo(value)
      }
    /**
     * <code>.communication.TextureInfo texture_info = 4;</code>
     */
    fun clearTextureInfo() {
      _builder.clearTextureInfo()
    }
    /**
     * <code>.communication.TextureInfo texture_info = 4;</code>
     * @return Whether the textureInfo field is set.
     */
    fun hasTextureInfo(): kotlin.Boolean {
      return _builder.hasTextureInfo()
    }

    /**
     * <code>bool torch_state = 5;</code>
     */
    var torchState: kotlin.Boolean
      @JvmName("getTorchState")
      get() = _builder.getTorchState()
      @JvmName("setTorchState")
      set(value) {
        _builder.setTorchState(value)
      }
    /**
     * <code>bool torch_state = 5;</code>
     */
    fun clearTorchState() {
      _builder.clearTorchState()
    }
    /**
     * <code>bool torch_state = 5;</code>
     * @return Whether the torchState field is set.
     */
    fun hasTorchState(): kotlin.Boolean {
      return _builder.hasTorchState()
    }

    /**
     * <code>bytes analysis = 6;</code>
     */
    var analysis: com.google.protobuf.ByteString
      @JvmName("getAnalysis")
      get() = _builder.getAnalysis()
      @JvmName("setAnalysis")
      set(value) {
        _builder.setAnalysis(value)
      }
    /**
     * <code>bytes analysis = 6;</code>
     */
    fun clearAnalysis() {
      _builder.clearAnalysis()
    }
    /**
     * <code>bytes analysis = 6;</code>
     * @return Whether the analysis field is set.
     */
    fun hasAnalysis(): kotlin.Boolean {
      return _builder.hasAnalysis()
    }
    val stubCase: dev.yanshouwang.camerax.communication.Communication.Message.StubCase
      @JvmName("getStubCase")
      get() = _builder.getStubCase()

    fun clearStub() {
      _builder.clearStub()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun dev.yanshouwang.camerax.communication.Communication.Message.copy(block: dev.yanshouwang.camerax.communication.MessageKt.Dsl.() -> Unit): dev.yanshouwang.camerax.communication.Communication.Message =
  dev.yanshouwang.camerax.communication.MessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()
