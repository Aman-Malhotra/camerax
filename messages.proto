syntax = "proto3";
package messages;

option java_package = "dev.yanshouwang.camerax.messages";

message Command {
  CommandCategory category = 1;
  oneof arguments {
    CameraControllerBindCommandArguments camera_controller_bind_arguments = 2;
    CameraControllerUnbindCommandArguments camera_controller_unbind_arguments = 3;
    CameraControllerTorchCommandArguments camera_controller_torch_arguments = 4;
    CameraControllerZoomCommandArguments camera_controller_zoom_arguments = 5;
    CameraControllerFocusAutomaticallyCommandArguments camera_controller_focus_automatically_arguments = 6;
    CameraControllerFocusManuallyCommandArguments camera_controller_focus_manually_arguments = 7;
    ImageProxyCloseCommandArguments image_proxy_close_arguments = 8;
  }
}

enum CommandCategory {
  COMMAND_CATEGORY_GET_QUARTER_TURNS = 0;
  COMMAND_CATEGORY_CAMERA_CONTROLLER_BIND = 1;
  COMMAND_CATEGORY_CAMERA_CONTROLLER_UNBIND = 2;
  COMMAND_CATEGORY_CAMERA_CONTROLLER_TORCH = 3;
  COMMAND_CATEGORY_CAMERA_CONTROLLER_ZOOM = 4;
  COMMAND_CATEGORY_CAMERA_CONTROLLER_FOCUS_AUTOMATICALLY = 5;
  COMMAND_CATEGORY_CAMERA_CONTROLLER_FOCUS_MANUALLY = 6;
  COMMAND_CATEGORY_IMAGE_PROXY_CLOSE = 7;
}

message CameraControllerBindCommandArguments {
  string id = 1;
  CameraSelector selector = 2;
}

message CameraControllerUnbindCommandArguments {
  string id = 1;
}

message CameraControllerTorchCommandArguments {
  string id = 1;
  bool state = 2;
}

message CameraControllerZoomCommandArguments {
  string id = 1;
  double value = 2;
}

message CameraControllerFocusAutomaticallyCommandArguments {
  string id = 1;
}

message CameraControllerFocusManuallyCommandArguments {
  string id = 1;
  double width = 2;
  double height = 3;
  double x = 4;
  double y = 5;
}

message ImageProxyCloseCommandArguments {
  string controller_id = 1;
  string id = 2;
}

message Reply {
  oneof arguments {
    GetQuarterTurnsReplyArguments get_quarter_turns_arguments = 1;
    CameraControllerBindReplyArguments camera_controller_bind_arguments = 2;
  }
}

message GetQuarterTurnsReplyArguments {
  int32 quarter_turns = 1;
}

message CameraControllerBindReplyArguments {
  CameraValue camera_value = 1;
}

message Event {
  EventCategory category = 1;
  oneof arguments {
    QuarterTurnsChangedEventArguments quarter_turns_changed_arguments = 2;
    CameraControllerImageProxiedEventArguments camera_controller_image_proxied_arguments = 3;
  }
}

enum EventCategory {
  EVENT_CATEGORY_QUARTER_TURNS_CHANGED = 0;
  EVENT_CATEGORY_CAMERA_CONTROLLER_IMAGE_PROXIED = 1;
}

message QuarterTurnsChangedEventArguments {
  int32 quarter_turns = 1;
}

message CameraControllerImageProxiedEventArguments {
  string id = 1;
  ImageProxy image_proxy = 2;
}

message CameraSelector {
  CameraFacing facing = 1;
}

enum CameraFacing {
  CAMERA_FACING_BACK = 0;
  CAMERA_FACING_FRONT = 1;
}

message CameraValue {
  int32 texture_id = 1;
  int32 texture_width = 2;
  int32 texture_height = 3;
  bool torch_available = 4;
  double zoom_minimum = 5;
  double zoom_maximum = 6;
}

message ImageProxy {
  string id = 1;
  bytes data = 2;
  int32 width = 3;
  int32 height = 4;
}